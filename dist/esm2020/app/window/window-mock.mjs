export const WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER = {
    closed: null,
    defaultStatus: null,
    document: null,
    frameElement: null,
    frames: null,
    history: null,
    innerHeight: null,
    innerWidth: null,
    length: null,
    localStorage: null,
    location: null,
    name: null,
    navigator: null,
    opener: null,
    outerHeight: null,
    outerWidth: null,
    pageXOffset: null,
    pageYOffset: null,
    parent: null,
    screen: null,
    screenLeft: null,
    screenTop: null,
    screenX: null,
    screenY: null,
    sessionStorage: null,
    scrollX: null,
    scrollY: null,
    self: null,
    status: null,
    top: null,
    addEventListener: (...args) => null,
    alert: (...args) => null,
    atob: (...args) => null,
    blur: (...args) => null,
    btoa: (...args) => null,
    clearInterval: (...args) => null,
    clearTimeout: (...args) => null,
    close: (...args) => null,
    confirm: (...args) => null,
    focus: (...args) => null,
    getComputedStyle: (...args) => null,
    getSelection: (...args) => null,
    matchMedia: (...args) => null,
    moveBy: (...args) => null,
    moveTo: (...args) => null,
    open: (...args) => null,
    print: (...args) => null,
    prompt: (...args) => null,
    resizeBy: (...args) => null,
    resizeTo: (...args) => null,
    removeEventListener: (...args) => null,
    scroll: (...args) => null,
    scrollBy: (...args) => null,
    scrollTo: (...args) => null,
    setInterval: (...args) => null,
    setTimeout: (...args) => null,
    stop: (...args) => null,
};
export const WINDOW_MOCK = {
    ...WINDOW_MOCK_WITHOUT_INTERSECTION_OBSERVER,
    IntersectionObserver: function (...args) {
        this.observe = () => null;
        this.unobserve = () => null;
    },
    IntersectionObserverEntry: class IntersectionObserverEntryMock {
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LW1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL3dpbmRvdy93aW5kb3ctbW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRztJQUN2RCxNQUFNLEVBQUUsSUFBSTtJQUNaLGFBQWEsRUFBRSxJQUFJO0lBQ25CLFFBQVEsRUFBRSxJQUFJO0lBQ2QsWUFBWSxFQUFFLElBQUk7SUFDbEIsTUFBTSxFQUFFLElBQUk7SUFDWixPQUFPLEVBQUUsSUFBSTtJQUNiLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLE1BQU0sRUFBRSxJQUFJO0lBQ1osWUFBWSxFQUFFLElBQUk7SUFDbEIsUUFBUSxFQUFFLElBQUk7SUFDZCxJQUFJLEVBQUUsSUFBSTtJQUNWLFNBQVMsRUFBRSxJQUFJO0lBQ2YsTUFBTSxFQUFFLElBQUk7SUFDWixXQUFXLEVBQUUsSUFBSTtJQUNqQixVQUFVLEVBQUUsSUFBSTtJQUNoQixXQUFXLEVBQUUsSUFBSTtJQUNqQixXQUFXLEVBQUUsSUFBSTtJQUNqQixNQUFNLEVBQUUsSUFBSTtJQUNaLE1BQU0sRUFBRSxJQUFJO0lBQ1osVUFBVSxFQUFFLElBQUk7SUFDaEIsU0FBUyxFQUFFLElBQUk7SUFDZixPQUFPLEVBQUUsSUFBSTtJQUNiLE9BQU8sRUFBRSxJQUFJO0lBQ2IsY0FBYyxFQUFFLElBQUk7SUFDcEIsT0FBTyxFQUFFLElBQUk7SUFDYixPQUFPLEVBQUUsSUFBSTtJQUNiLElBQUksRUFBRSxJQUFJO0lBQ1YsTUFBTSxFQUFFLElBQUk7SUFDWixHQUFHLEVBQUUsSUFBSTtJQUNULGdCQUFnQixFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDbkMsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDeEIsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDdkIsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDdkIsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDdkIsYUFBYSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDaEMsWUFBWSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDL0IsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDeEIsT0FBTyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDMUIsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7SUFDeEIsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUNuQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUMvQixVQUFVLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUM3QixNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUN6QixNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUN6QixJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUN2QixLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUN4QixNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUN6QixRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUMzQixRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtJQUMzQixtQkFBbUIsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQ3RDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQ3pCLFFBQVEsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQzNCLFFBQVEsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQzNCLFdBQVcsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQzlCLFVBQVUsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0lBQzdCLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0NBQ3hCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUc7SUFDekIsR0FBRyx5Q0FBeUM7SUFDNUMsb0JBQW9CLEVBQUUsVUFBVSxHQUFHLElBQUk7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUNELHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCO0tBQUc7Q0FDbEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBXSU5ET1dfTU9DS19XSVRIT1VUX0lOVEVSU0VDVElPTl9PQlNFUlZFUiA9IHtcbiAgY2xvc2VkOiBudWxsLFxuICBkZWZhdWx0U3RhdHVzOiBudWxsLFxuICBkb2N1bWVudDogbnVsbCxcbiAgZnJhbWVFbGVtZW50OiBudWxsLFxuICBmcmFtZXM6IG51bGwsXG4gIGhpc3Rvcnk6IG51bGwsXG4gIGlubmVySGVpZ2h0OiBudWxsLFxuICBpbm5lcldpZHRoOiBudWxsLFxuICBsZW5ndGg6IG51bGwsXG4gIGxvY2FsU3RvcmFnZTogbnVsbCxcbiAgbG9jYXRpb246IG51bGwsXG4gIG5hbWU6IG51bGwsXG4gIG5hdmlnYXRvcjogbnVsbCxcbiAgb3BlbmVyOiBudWxsLFxuICBvdXRlckhlaWdodDogbnVsbCxcbiAgb3V0ZXJXaWR0aDogbnVsbCxcbiAgcGFnZVhPZmZzZXQ6IG51bGwsXG4gIHBhZ2VZT2Zmc2V0OiBudWxsLFxuICBwYXJlbnQ6IG51bGwsXG4gIHNjcmVlbjogbnVsbCxcbiAgc2NyZWVuTGVmdDogbnVsbCxcbiAgc2NyZWVuVG9wOiBudWxsLFxuICBzY3JlZW5YOiBudWxsLFxuICBzY3JlZW5ZOiBudWxsLFxuICBzZXNzaW9uU3RvcmFnZTogbnVsbCxcbiAgc2Nyb2xsWDogbnVsbCxcbiAgc2Nyb2xsWTogbnVsbCxcbiAgc2VsZjogbnVsbCxcbiAgc3RhdHVzOiBudWxsLFxuICB0b3A6IG51bGwsXG4gIGFkZEV2ZW50TGlzdGVuZXI6ICguLi5hcmdzKSA9PiBudWxsLFxuICBhbGVydDogKC4uLmFyZ3MpID0+IG51bGwsXG4gIGF0b2I6ICguLi5hcmdzKSA9PiBudWxsLFxuICBibHVyOiAoLi4uYXJncykgPT4gbnVsbCxcbiAgYnRvYTogKC4uLmFyZ3MpID0+IG51bGwsXG4gIGNsZWFySW50ZXJ2YWw6ICguLi5hcmdzKSA9PiBudWxsLFxuICBjbGVhclRpbWVvdXQ6ICguLi5hcmdzKSA9PiBudWxsLFxuICBjbG9zZTogKC4uLmFyZ3MpID0+IG51bGwsXG4gIGNvbmZpcm06ICguLi5hcmdzKSA9PiBudWxsLFxuICBmb2N1czogKC4uLmFyZ3MpID0+IG51bGwsXG4gIGdldENvbXB1dGVkU3R5bGU6ICguLi5hcmdzKSA9PiBudWxsLFxuICBnZXRTZWxlY3Rpb246ICguLi5hcmdzKSA9PiBudWxsLFxuICBtYXRjaE1lZGlhOiAoLi4uYXJncykgPT4gbnVsbCxcbiAgbW92ZUJ5OiAoLi4uYXJncykgPT4gbnVsbCxcbiAgbW92ZVRvOiAoLi4uYXJncykgPT4gbnVsbCxcbiAgb3BlbjogKC4uLmFyZ3MpID0+IG51bGwsXG4gIHByaW50OiAoLi4uYXJncykgPT4gbnVsbCxcbiAgcHJvbXB0OiAoLi4uYXJncykgPT4gbnVsbCxcbiAgcmVzaXplQnk6ICguLi5hcmdzKSA9PiBudWxsLFxuICByZXNpemVUbzogKC4uLmFyZ3MpID0+IG51bGwsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICguLi5hcmdzKSA9PiBudWxsLFxuICBzY3JvbGw6ICguLi5hcmdzKSA9PiBudWxsLFxuICBzY3JvbGxCeTogKC4uLmFyZ3MpID0+IG51bGwsXG4gIHNjcm9sbFRvOiAoLi4uYXJncykgPT4gbnVsbCxcbiAgc2V0SW50ZXJ2YWw6ICguLi5hcmdzKSA9PiBudWxsLFxuICBzZXRUaW1lb3V0OiAoLi4uYXJncykgPT4gbnVsbCxcbiAgc3RvcDogKC4uLmFyZ3MpID0+IG51bGwsXG59O1xuXG5leHBvcnQgY29uc3QgV0lORE9XX01PQ0sgPSB7XG4gIC4uLldJTkRPV19NT0NLX1dJVEhPVVRfSU5URVJTRUNUSU9OX09CU0VSVkVSLFxuICBJbnRlcnNlY3Rpb25PYnNlcnZlcjogZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICB0aGlzLm9ic2VydmUgPSAoKSA9PiBudWxsO1xuICAgIHRoaXMudW5vYnNlcnZlID0gKCkgPT4gbnVsbDtcbiAgfSxcbiAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeTogY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeU1vY2sge30sXG59O1xuIl19